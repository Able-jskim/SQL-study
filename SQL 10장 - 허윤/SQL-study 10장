https://docs.google.com/document/d/1xXO-roHEcNQefKFiY24cH1h4mS5ukwnfj0Rlgv7L71s/edit

purchase_log_detail

dt        |order_id|user_id |item_id|price |category     |sub_category|
----------|--------|--------|-------|------|-------------|------------|
2017-01-18|   48291|usr33395|lad533 | 37300|ladys_fashion|bag         |
2017-01-18|   48291|usr33395|lad329 | 97300|ladys_fashion|jacket      |
2017-01-18|   48291|usr33395|lad102 |114600|ladys_fashion|jacket      |
2017-01-18|   48291|usr33395|lad886 | 33300|ladys_fashion|bag         |
2017-01-18|   48292|usr52832|dvd871 | 32800|dvd          |documentary |
2017-01-18|   48292|usr52832|gam167 | 26000|game         |accessories |
2017-01-18|   48292|usr52832|lad289 | 57300|ladys_fashion|bag         |
2017-01-18|   48293|usr28891|out977 | 28600|outdoor      |camp        |
2017-01-18|   48293|usr28891|boo256 | 22500|book         |business    |
2017-01-18|   48293|usr28891|lad125 | 61500|ladys_fashion|jacket      |
2017-01-18|   48294|usr33604|mem233 |116300|mens_fashion |jacket      |
2017-01-18|   48294|usr33604|cd477  | 25800|cd           |classic     |
2017-01-18|   48294|usr33604|boo468 | 31000|book         |business    |
2017-01-18|   48294|usr33604|foo402 | 48700|food         |meats       |
2017-01-18|   48295|usr38013|foo134 | 32000|food         |fish        |
2017-01-18|   48295|usr38013|lad147 | 96100|ladys_fashion|jacket      |


10 - 1
with
sub_category_amount AS (
	SELECT 
		category AS category 
		, sub_category AS sub_category
		, SUM(price) AS amount 
	FROM 
		purchase_detail_log
	group by 
		category, sub_category 
)
, category_amount AS (
	SELECT 
		category
		,'all' AS sub_category 
		, SUM(price) AS amount
	FROM 
		purchase_detail_log	
	group by category 
)
, total_amount AS (
	SELECT 
		'all' AS category 
		, 'all' AS sub_category 
		, SUM(price) AS amount 
	FROM 
		purchase_detail_log
)

select category, sub_category, amount from sub_category_amount
union all
select category, sub_category, amount from category_amount
union all
select category, sub_category, amount from total_amount

CTE문을 이용하여 3개의 임시 테이블을 만든 후 
UNION ALL을 이용하여 조인

Result

category     |sub_category|amount|
-------------|------------|------|
ladys_fashion|bag         |127900|
food         |fish        | 32000|
food         |meats       | 48700|
dvd          |documentary | 32800|
mens_fashion |jacket      |116300|
book         |business    | 53500|
outdoor      |camp        | 28600|
game         |accessories | 26000|
ladys_fashion|jacket      |369500|
cd           |classic     | 25800|
game         |all         | 26000|
book         |all         | 53500|
ladys_fashion|all         |497400|
outdoor      |all         | 28600|
mens_fashion |all         |116300|
cd           |all         | 25800|
dvd          |all         | 32800|
food         |all         | 80700|
all          |all         |861100|

----------------

10-2 
SELECT 
   COALESCE(category, 'all') AS category
   , COALESCE(sub_category, 'all') AS sub_category
   , SUM(price) AS amount
FROM purchase_detail_log 
group by ROLLUP(category, sub_category)

롤업 - UNION ALL 보다 연산량 적음. // 책 내용

ROLLUP구문은 GROUP BY 절과 같이 사용 되며, 
GROUP BY절에 의해서 그룹 지어진 집합 결과에 대해서 
좀 더 상세한 정보를 반환하는 기능을 수행 한다.
SELECT절에 ROLLUP을 사용함으로써 보통의 SELECT된 데이터와 그 데이터의 총계를 구할 수 있다.

출처: https://androphil.tistory.com/166 

Result

category     |sub_category|amount|
-------------|------------|------|
all          |all         |861100|
ladys_fashion|bag         |127900|
food         |fish        | 32000|
food         |meats       | 48700|
dvd          |documentary | 32800|
mens_fashion |jacket      |116300|
book         |business    | 53500|
outdoor      |camp        | 28600|
game         |accessories | 26000|
ladys_fashion|jacket      |369500|
cd           |classic     | 25800|
game         |all         | 26000|
book         |all         | 53500|
ladys_fashion|all         |497400|
outdoor      |all         | 28600|
mens_fashion |all         |116300|
cd           |all         | 25800|
dvd          |all         | 32800|
food         |all         | 80700|

----------------

10-3 에러
with
monthly_sales AS (
	SELECT 
		cateogry1
		,SUM(amount) AS amount
	FROM 
		purchase_log
	where 1=1
		--dt BETWEEN '2015-12-01' and '2015-12-31'
	group BY category1
)
, sales_composition_ratio AS (
	SELECT 
		category1
		, amount
		, 100.0 * amount / SUM(amount) over() AS composition_ratio
		, 100.0 * SUM(amount) over (order by amount desc rows between UNBOUNDED PRECEDING and CURRENT ROW)
		/ SUM(amount) OVER() AS cumulative_ratio
	FROM 
		monthly_sales
)

select *
	, CASE 
		WHEN cumulative_ratio between 0 and 70 then 'A'
		WHEN cumulative_ratio between 70 and 90 then 'B'
		WHEN cumulative_ratio between 90 and 100 then 'C'
		END AS abc_rank
from sales_composition_ratio
order by amount desc

dt가 이상하고 category1이라는 변수가 없음.
데이터가 잘못 적혀있음!!

----------------

결과 169p 참조
빅쿼리에서 돌려봐보기
with
chat_duartion_ration AS (
select
  chat_duration_sum
  ,100.0 * chat_duration_sum / sum(chat_duration_sum) over () AS composition_ratio
  ,100.0 * sum(chat_duration_sum) over(order by chat_duration_sum desc rows between unbounded preceding and current row) / sum(chat_duration_sum) over () AS cumulative_ratio
from `hc-bi-project.pm_tmp.user_attr`
where 1=1
  and chat_duration_sum is not null
  and chat_duration_sum > 0
)

select
  *
  ,case when cumulative_ratio between 0 and 70 then 'A'
        when cumulative_ratio between 70 and 90 then 'B'
        when cumulative_ratio between 90 and 100 then 'C' 
        end as abc_rank
from
  chat_duartion_ration
order by chat_duration_sum desc

----------------

10-4
with
daily_category_amount AS (
	SELECT 
		dt
		, category
		, SUBSTRING(dt, 1, 4) AS year
		, SUBSTRING(dt, 6, 2) AS month
		, SUBSTRING(dt, 9, 2) AS date
		, SUM(price) AS amount
	FROM purchase_detail_log
	group by dt, category
)
, monthly_category_amount AS (
	SELECT 
		concat(year, '-', month) AS year_month
		, category 
		, SUM(amount) AS amount
	FROM daily_category_amount
	group by year, month, category
)
SELECT 
	year_month
	, category
	, amount
	, first_value(amount) over(partition by category order by year_month, category rows unbounded preceding ) AS base_amount
	, 100.0 * amount / first_value(amount) over(partition by category order by year_month, category rows unbounded preceding) AS rate
FROM 
	monthly_category_amount
order by year_month, category

데이터가 달라서 결과는 다름

----------------

10-5
with
stats as(
	select 
		max(price) as max_price
		, min(price) as min_price
		, max(price) - min(price) as range_price
		, 10 as bucket_num
	from 
		purchase_detail_log
)
select *
from stats

Result

max_price|min_price|range_price|bucket_num|
---------|---------|-----------|----------|
   116300|    22500|      93800|        10|

----------------

10-6
with
stats as(
	select 
		max(price) as max_price
		, min(price) as min_price
		, max(price) - min(price) as range_price
		, 10 as bucket_num
	from 
		purchase_detail_log
)
, purchase_log_with_bucket as (
	select
		price
		, min_price 
		, price - min_price as diff
		, 1.0 * range_price / bucket_num as bucket_range
--		, floor(
--			1.0 * (price - min_price)
--			/ (1.0 * range_price / bucket_num)
--		) + 1 as bucket 
		, width_bucket(price, min_price, max_price, bucket_num) as bucket
		
	from 
		purchase_detail_log pdl , stats
)
select *
from purchase_log_with_bucket
order by price;

Result

price |min_price|diff |bucket_range         |bucket|
------|---------|-----|---------------------|------|
 22500|    22500|    0|9380.0000000000000000|     1|
 25800|    22500| 3300|9380.0000000000000000|     1|
 26000|    22500| 3500|9380.0000000000000000|     1|
 28600|    22500| 6100|9380.0000000000000000|     1|
 31000|    22500| 8500|9380.0000000000000000|     1|
 32000|    22500| 9500|9380.0000000000000000|     2|
 32800|    22500|10300|9380.0000000000000000|     2|
 33300|    22500|10800|9380.0000000000000000|     2|
 37300|    22500|14800|9380.0000000000000000|     2|
 48700|    22500|26200|9380.0000000000000000|     3|
 57300|    22500|34800|9380.0000000000000000|     4|
 61500|    22500|39000|9380.0000000000000000|     5|
 96100|    22500|73600|9380.0000000000000000|     8|
 97300|    22500|74800|9380.0000000000000000|     8|
114600|    22500|92100|9380.0000000000000000|    10|
116300|    22500|93800|9380.0000000000000000|    11|

----------------

10-7

with
stats as(
	select 
		max(price) + 1 as max_price
		, min(price) as min_price
		, max(price) + 1 - min(price) as range_price
		, 10 as bucket_num
	from 
		purchase_detail_log
)
, purchase_log_with_bucket as (
	select
		price
		, min_price 
		, price - min_price as diff
		, 1.0 * range_price / bucket_num as bucket_range
--		, floor(
--			1.0 * (price - min_price)
--			/ (1.0 * range_price / bucket_num)
--		) + 1 as bucket 
		, width_bucket(price, min_price, max_price, bucket_num) as bucket
		
	from 
		purchase_detail_log pdl , stats
)
select *
from purchase_log_with_bucket
order by price;

Result

price |min_price|diff |bucket_range         |bucket|
------|---------|-----|---------------------|------|
 22500|    22500|    0|9380.1000000000000000|     1|
 25800|    22500| 3300|9380.1000000000000000|     1|
 26000|    22500| 3500|9380.1000000000000000|     1|
 28600|    22500| 6100|9380.1000000000000000|     1|
 31000|    22500| 8500|9380.1000000000000000|     1|
 32000|    22500| 9500|9380.1000000000000000|     2|
 32800|    22500|10300|9380.1000000000000000|     2|
 33300|    22500|10800|9380.1000000000000000|     2|
 37300|    22500|14800|9380.1000000000000000|     2|
 48700|    22500|26200|9380.1000000000000000|     3|
 57300|    22500|34800|9380.1000000000000000|     4|
 61500|    22500|39000|9380.1000000000000000|     5|
 96100|    22500|73600|9380.1000000000000000|     8|
 97300|    22500|74800|9380.1000000000000000|     8|
114600|    22500|92100|9380.1000000000000000|    10|
116300|    22500|93800|9380.1000000000000000|    10|

----------------

10-8

with
stats as(
	select 
		max(price) + 1 as max_price
		, min(price) as min_price
		, max(price) + 1 - min(price) as range_price
		, 10 as bucket_num
	from 
		purchase_detail_log
)
, purchase_log_with_bucket as (
	select
		price
		, min_price 
		, price - min_price as diff
		, 1.0 * range_price / bucket_num as bucket_range
--		, floor(
--			1.0 * (price - min_price)
--			/ (1.0 * range_price / bucket_num)
--		) + 1 as bucket 
		, width_bucket(price, min_price, max_price, bucket_num) as bucket
		
	from 
		purchase_detail_log pdl , stats
)
select 
	bucket
	, min_price + bucket_range * (bucket - 1) as lower_limit
	, min_price + bucket_range * bucket as upper_limit
	, count(price) as num_purchase
	, sum(price) as total_amount
from purchase_log_with_bucket
group by bucket, min_price, bucket_range
order by bucket;

Result

bucket|lower_limit            |upper_limit            |num_purchase|total_amount|
------|-----------------------|-----------------------|------------|------------|
     1| 22500.0000000000000000| 31880.1000000000000000|           5|      133900|
     2| 31880.1000000000000000| 41260.2000000000000000|           4|      135400|
     3| 41260.2000000000000000| 50640.3000000000000000|           1|       48700|
     4| 50640.3000000000000000| 60020.4000000000000000|           1|       57300|
     5| 60020.4000000000000000| 69400.5000000000000000|           1|       61500|
     8| 88160.7000000000000000| 97540.8000000000000000|           2|      193400|
    10|106920.9000000000000000|116301.0000000000000000|           2|      230900|

----------------

10-9

with
stats as(
	select 
		50000 as max_price
		, 0 as min_price
		, 50000 as range_price
		, 10 as bucket_num
	from 
		purchase_detail_log
)
, purchase_log_with_bucket as (
	select
		price
		, min_price 
		, price - min_price as diff
		, 1.0 * range_price / bucket_num as bucket_range
--		, floor(
--			1.0 * (price - min_price)
--			/ (1.0 * range_price / bucket_num)
--		) + 1 as bucket 
		, width_bucket(price, min_price, max_price, bucket_num) as bucket
		
	from 
		purchase_detail_log pdl , stats
)
select 
	bucket
	, min_price + bucket_range * (bucket - 1) as lower_limit
	, min_price + bucket_range * bucket as upper_limit
	, count(price) as num_purchase
	, sum(price) as total_amount
from purchase_log_with_bucket
group by bucket, min_price, bucket_range
order by bucket;

Result

bucket|lower_limit           |upper_limit           |num_purchase|total_amount|
------|----------------------|----------------------|------------|------------|
     5|20000.0000000000000000|25000.0000000000000000|          16|      360000|
     6|25000.0000000000000000|30000.0000000000000000|          48|     1286400|
     7|30000.0000000000000000|35000.0000000000000000|          64|     2065600|
     8|35000.0000000000000000|40000.0000000000000000|          16|      596800|
    10|45000.0000000000000000|50000.0000000000000000|          16|      779200|
    11|50000.0000000000000000|55000.0000000000000000|          96|     8689600|

결과가 다르니까 실제로 머리속으로 해보면 좋을듯
